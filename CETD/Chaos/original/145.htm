<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head bgcolor="#ffffff">
<title>World's Longest Palindrome Sentence? 15,139 (no, 17,826) words</title>
</head>
<body>
<link rel="icon" href="favicon.ico" type="image/x-icon" />
<link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />

<h1>World's Longest Palindrome Sentence? <strike>15,139</strike> 17,826 words</h1>
<h3 align=right>See also: <a href="palindrome-comments.html">comments</a>, 
<a href="pal2.html">program</a>, <a href="pal-alg.html">strategy</a></h3>

At 8:02 PM on the 20th of February 2002 it was <b>20:02 02/20 2002</b> (if
you live in the US), or <b>20:02 20/02 2002</b> (if you live in the
rest of the world).  Either way, it was the best of times, it was the
tseb of times, it was a palindromic time.  In honor of the event, I
wondered if I could create the world's longest palindrome. A search
for <a
href="http://www.google.com/search?hl=en&q=world%27s+longest+palindrome">world's
longest palindrome</a> revealed that <i>"In 1980, Giles Selig Hales
claimed to have written the world's longest palindrome, which
consisted of 58,795 letters."</i> That didn't seem too hard to beat.
And in fact, in a few hours I was able to write <a href="pal.html">a
program</a> to create <a href="pal1txt.html">a palindrome</a> with 63,647
letters (and later I <a href="pal2.html">updated the program</a> and
got 74,633 letters).  

<p>Cognoscenti such as Mark Saltveit, editor of
<a href="http://realchange.org/pal"><i>The Palindromist</i></a>,
rightfully point out that my creation should not be called a true
palindrome, because it makes no sense. But Saltveit says that I am
probably safe in calling this <i>"the world's longest
palindromic sentence, or the world's longest parody of `A man, a
plan.'&nbsp;"</i> I'm satisfied with that assessment.

<p>Jerry Berns has his candidate <a
href="http://www.bernsrite.com/GMB/palindrome.htm">longest
palindrome</a>, consisting of 31,358 words or 119,180 letters, so he's
got me beat.  His is not in the form of a sentence, but it does have
restrictions on how many times a word can be repeated (otherwise you could
just do "A radar, a radar, a radar, a radar, ..." and have an infinitely long palindrome).


<h2>How I did it</h2>
<p>
I knew that <a href="http://en.wikipedia.org/wiki/User:Dan_Hoey">Dan
Hoey</a> had generated a longish palindrome beginning with <i>"A man,
a plan"</i> and ending with <i>"Panama"</i>. Another search revealed
it was a <a
href="http://www2.vo.lu/homepages/phahn/anagrams/panama.htm">540 word
version</a> created in 1984.  Hoey writes <i>"This was done with the
Unix spelling dictionary and a fairly simple-minded program.  With a
<b>better word list</b> and a <b>smarter program</b> I'm sure the
palindrome could be ten times as long."</i> Now if that's not a
challenge, I don't know what is. 
<p>
Luckily for me, I had a
<b>better word list:</b> the very nice <a
href="http://www.dcs.shef.ac.uk/research/ilash/Moby/">Moby Word
list</a> from Grady Ward (also available at <a
href="http://promo.net/cgi-promo/pg/t9.cgi?author=Ward,%20Grady&whole=yes&ftpsite=ftp://ibiblio.org/pub/docs/books/gutenberg/">Project
Gutenberg</a>), from which I was able to extract the 126,144-word <a
href="npdict.txt">npdict.txt</a>.
I thought it would be easy to create a
<b>smarter program:</b> I already had a short Python program to look
up words in a dictionary given a prefix.  All I would have to do is
extend it to allow suffix lookup, and implement a <a
href="pal-alg.html">search algorithm</a>.
Also, importantly, I had an ordinary laptop computer which was at least 
1,000 times more powerful than the minicomputer Hoey had in 1984.


<p>
The resulting <a
href="pal.html">program</a> wasn't too hard to put together: starting
at 10:00 PM after the kids were asleep, I thought I might get a long
palindrome generated before 02/20 was over. It actually took until
1:00 AM to get something that seemed good (at 1:00 AM), and then in
the light of day three more hours to fix <a
href="palindrome-comments.html">two bugs</a> (one reported by Jasvir
Nagra and one found by me), and replace a recursive algorithm with a
stack to overcome a bug/limitation of Python.

<p>
Given that, here's what I was able to come up with, both back in 2002 and more recently:
<p>
<h2><b style="background-color:#FFFF33">Original 15,139 Word Palindrome</b></h2>

<table>
<tr><td><b>Created:</b><td> 20 February, 2002
<tr><td><b>Words:</b><td> 15,319
<tr><td><b>Letters:</b><td> 63,647
<tr><td><b>Phrases:</b><td> 12,400 comma-separated noun phrases
<tr><td><b>Program:</b><td> <a href="pal.html">pal.py</a> 
<tr><td><b>Excerpt</b>:<td>A man, a plan, a caddy, Ore, Lee, tsuba, Thaine, a lair, 
... <i>(<a href="pal1txt.html">rest here</a>)</i> ...,  Hell, a burial, Aeniah, Tabu,
Steele, Roydd, a canal, Panama. 
<tr><td><b>Full palindrome:</b><td> <a href="pal1txt.html">here</a>

<tr><td><b>Storyboard:</b><td valign=center>
<table>
<tr><td><img title="A man," src="aman.jpg"> <td> <img title="a plan," src="aplan.jpg" height=88> <td> <img title="a caddy," src="acaddy.jpg"> <td><font size="+4">...</a>
<tr><td align=center>A man, <td align=center> a plan, <td align=center> a caddy, <td> 
</table>
</table>

<p><b>Commentary:</b> Maybe I'm biased, but I think the palindrome  starts out quite
strong. <i>"A man, a plan, a caddy"</i> is the basic premise of
another <a
href="http://directory.google.com/Top/Arts/Movies/Titles/C/Caddyshack/">fine
piece of storytelling</a>.  Unfortunately, things go downhill from
there rather quickly.  It contains <a href="pal1txt.html#truths">truths</a>, but
it does not have a plot.  It has <a href="pal1txt.html#Putnam">Putnam</a>, but no
logic; <a href="pal1txt.html#Tesla">Tesla</a>, but no electricity; <a
href="pal1txt.html#Pareto">Pareto</a>, but no optimality; <a
href="pal1txt.html#Ebert">Ebert</a>, but no thumbs up.  It has an ensemble cast
including Tim <a href="pal1txt.html#Allen">Allen</a>, Ed <a
href="pal1txt.html#Harris">Harris</a> and Al <a href="pal1txt.html#Pacino">Pacino</a>, but
they lack character development. It has <a href="pal1txt.html#Sinatra">Sinatra</a>
and <a href="pal1txt.html#Pink">Pink</a>, but it doesn't sing.  It has <a
href="pal1txt.html#Monet">Monet</a> and <a href="pal1txt.html#Goya">Goya</a>, but no artistry.
It has <a href="pal1txt.html#Slovak">Slovak</a>, <a href="pal1txt.html#Inuit">Inuit</a>, <a
href="pal1txt.html#Creek">Creek</a>, and <a href="pal1txt.html#Italian">Italian</a>, but it's
all Greek to me. It has exotic locations like <a
href="pal1txt.html#Bali">Bali</a>, <a href="pal1txt.html#Maui">Maui</a>, 
<a href="pal1txt.html#Uranus">Uranus</a>, and <a
href="pal1txt.html#Canada">Canada</a>, but it jumps around needlessly. It has <a
href="pal1txt.html#Occam">Occam</a>, but it is the antithesis of his maxim
<i>"Entia non sunt multiplicanda praeter necessitatem."</i> If you
tried to read the whole thing, you'd get to "<a href="pal1txt.html#yawn">a
yawn</a>" and stop. Or you might be overcome by the jargon, such as <a
href="pal1txt.html#PETN">PETN</a>, <a href="pal1txt.html#ILGWU">ILGWU</a>, <a
href="pal1txt.html#PROM">PROM</a>, <a href="pal1txt.html#UNESCO">UNESCO</a>, and <a
href="pal1txt.html#MYOB">MYOB</a>. Most serendipitous of all is that <a
href="pal1txt.html#Steele">Steele</a>, who collected <a
href="http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node89.html#7341">several</a>
shorter <a
href="http://www-2.cs.cmu.edu/Groups/AI/html/cltl/clm/node145.html#15940">versions</a>
of the Panama oeuvre in a book about <a
href="http://www.amazon.com/exec/obidos/ASIN/1555580416"> a Lisp</a>,
shows up in the very last line.  Steele and some others have some <a
href="palindrome-comments.html">comments</a>. You can read the results
from top to bottom (if you don't get bored) or you can start in <a
href="pal1txt.html#mid">the middle; the letter "y" in "Moray"</a>.<p>

<b>Speed:</b> Once I started running my program, it seemed almost too easy.
I had it print a message every time it finds a palindrome that is 200 words
longer than the last one, and it consistently prints this message every second;
so in 3 or 4 seconds it breaks Hoey's record, and 
in 30 seconds it is over 6000 words.
At around 8000 words progress slows to about 1,000 words per minute,
and by around 10,000 to 12,000 words progress is sporadic. This is
because we are running out of good words: there are 126,000 words in
the dictionary, but only about 10% of them are easily reversible.  For
example, there are 426 words that contain "eq" or "sq", but these are
hard to use in a palindrome because there are no words containing "qe"
or "qs", and only a few words that end in "q" (and could then be
followed by a word starting with "e" or "s".
<td valign=top>


<h2><b style="background-color:#FFFF33">Latest 17,826 Word Palindrome</b></h2>

<table>
<tr><td><b>Created:</b><td> 11 November, 2007
<tr><td><b>Words:</b><td> 17,826
<tr><td><b>Letters:</b><td> 74,663
<tr><td><b>Phrases:</b><td> 14,382 comma-separated noun phrases
<tr><td><b>Program:</b><td> <a href="pal2.html">pal2.py</a> 
<tr><td><b>Excerpt:</b><td> A man, a plan, a cameo, Zena, Bird, Mocha,
... <i>(<a href="pal17txt.html">rest here</a>)</i> ..., Lew, Orpah, Comdr, Ibanez, OEM, a canal, Panama!
<tr><td><b>Full palindrome:</b><td> <a href="pal17txt.html">here</a>
<tr><td><b>Storyboard:</b><td valign=center>
<table>
<tr><td><img title="A man," src="aman2.jpg"> <td> <img title="a plan," src="aplan2.jpg" height=124> <td> <img title="a cameo," src="acameo.jpg" height=124> <td> <img title="Zena," src="zena.jpg" height=124> <td> <font size="+4">...</font>
<tr><td align=center>A man, <td align=center> a plan, <td align=center> a cameo, <td align=center> Zena, 
</table>
</table>

<p><b>Commentary:</b> Unfortunately, I
don't have the patience to attempt a witty commentary on this one,
but I can detail the history of this version.
After a reader sent in a suggestion, I made 4 changes:
<ol>
<li> I added the function <tt>reversible_words</tt>, which finds all
pairs of words in the dictionary that are palindromes of other words,
such as "Camus" and "Sumac".  There all 1100 of these, and adding them
all at once helps a little, but not much, because they tend to be found
by the search routine anyways.
<li> The old program would only add a new word that is
equal or longer than the missing part on the other side.  I added a
capability called <tt>tryharder</tt> 
to add words that are shorter as well.  That is, when I'm
looking for a word that starts with "aca", I consider "a caddy" and "a
canoe", etc., but this change allows me to also consider "A/C". 
This helps a little, but it also slows the program down a lot.
<li> I made the program faster.  Profiling showed that <tt>reverse</tt>
was a bottleneck, so I used the <tt>[::-1]</tt> idiom.
I also dump the results to file every 1000 words rather than every 200, until
we get near the end.
<li> I added unit tests, because that's the way things are done these days.
<tr>
<td valign=top>
</ol>
<p><b>Speed:</b> The program now starts out increasing by 1000 phrases
per second, consistently gets over 10,000 phrases in under 30 seconds,
and usually gets to 12,000 phrases in the first minute.  Things slow
down from there, but in ten runs all but one were over 17,000 words,
which takes about an hour.
</ol>


<h2>Language Induction</h2>

<p>I thought I had leaped past Hoey's 540-word Panama Palindrome by
a factor of 30, but when I showed him my palindrome, he said that he
<i>was really thinking of sticking with noun phrases of the
form "&lt;indefinite article&gt; &lt;noun&gt;."</i>

<p>This is an example of the venerable
<i>language induction</i> problem: given the single sentence <i>"A
man, a plan, a canal--Panama"</i> as evidence, what language does it define?
It seems clear that it consists of a series of any number of  noun phrases.
That is,
<pre>
    S => NP*
</pre>
But from one example, you can't say much more.  If we look at the examples from
Hoey and Steele, we can see they all start and end the same, so we can say:
<pre>
    S => "A man" "A plan" NP* "A canal" "Panama"
</pre>
But Hoey says that every noun phrase must have an indefinite article:
<pre>
    NP => IndefArt Noun
    IndefArt => "a" | "an"
</pre>
while I was allowing:
<pre>
    NP => ProperNoun
    NP => IndefArt Noun
    IndefArt => "a" | "an"
</pre>
Guy Steele suggested I should also try allowing other noun phrases,
such as "two Xs".  <a
href="http://citeseer.nj.nec.com/context/6879/0">Gold</a> said the
language induction problem can't be solved in general, but others
(e.g. <a
href="http://citeseer.nj.nec.com/context/201847/0">Horning</a>, <a
href="http://citeseer.nj.nec.com/mooney99learning.html">Mooney</a>, <a
href="http://citeseer.nj.nec.com/muggleton94inductive.html">Muggleton</a>,
<a href="http://citeseer.nj.nec.com/demarcken96unsupervised.html">de
Marcken</a>) have shown that it can be solved probabilistically if you
use a probabilistic rather than a strictly logical formalism. With Hoey in
mind, I also generated a solution with all indefinite articles:


<h2><b style="background-color:#FFFF33">2,211 Word Palindrome with only indefinite articles</b></h2>

<table>
<tr><td><b>Created:</b><td> November, 2003
<tr><td><b>Words:</b><td> 2,211
<tr><td><b>Letters:</b><td> 5,842
<tr><td><b>Phrases:</b><td> 1,106 comma-separated noun phrases
<tr><td><b>Program:</b><td> <a href="pal2.html">pal2.py</a> with a <a href="anpdict-short.txt">restricted dictionary</a>
<tr><td><b>Excerpt:</b><td>A man, a plan, a casa, a bait, a lag, a malt, 
... <i>(<a href="palindrome-a.html">rest here</a>)</i> ..., a natl, a mag, a lati, a baas, a canal, Panama!
<tr><td><b>Full palindrome:</b><td> <a href="palindrome-a.html">here</a>
<tr><td><b>Storyboard:</b><td valign=center>
<table>
<tr><td><img title="A man," src="aman3.jpg"> <td> <img title="a plan," src="aplan3.jpg" height=124> <td> <img title="a casa," src="acasa3.jpg" height=124> <td> <img title="a bait," src="abait3.jpg" height=124> <td> <img title="a lag" height=124 src="lag.gif"><td> <img title="a malt" src="amalt3.jpg"> <td> <font size="+4">...</font>
<tr><td align=center>A man, <td align=center> a plan, <td align=center> a casa, <td align=center> a bait, <td align=center> a lag, <td align=center> a malt,
</table>
</table>

<p><b>Commentary:</b> Hoey said he thought that a better word list and
a smarter program could get to ten times his 540-word palindrome,
using only noun phrases with indefinite articles. I'm pretty sure that
will never happen.  The problem is a dirth of "a"s. According to
Hoey's rules, every phrase must start with the letter "a".  That means
that either the rest of the word must be an exact reverse of another
word (and we know there are 1100 of these) or the phrase must have
another "a" in it somewhere, and it must be matched by two or more
other phrases.  Phrases such as "a man", "a plan" and "a canal" work
well because they contain multiple "a"s.  Now consider a phrase such
as "a biologist". If that appears in the palindrome, then somewhere else
the letters "tsigoloib" must appear. But note that those letters must
all appear in one word/phrase, because there is no "a", and we only
get word boundries at "a"s. And of course, there is no single word that
contain those letters.

<a>In general, take a word (such as "an asparagus" or "a biologist"),
split it into components around the  "a"s (yielding
["n", "sp", "r", "gus"] and ["biologist"]). Collect the set of all
such segments, from all the phrases in the dictionary. 
Now go back through the dictionary,
and for each word, see if the reverse of each of its components is
in this set.  So "an asparagus" is good, because its reversed components
all appear in the set: "n" appears in many places (including "an asparagus" 
itself), "ps" appears as a component in "a psalm", "r" appears in many
places (such as "a karat"), and "sug" appears in "a sugar". On
the other hand, "a biologist" is no good, because the component "tsigoloib"
does not appear.  
<p>
When I first applied this test, I started with the <a
href="anpdict.txt">69,241-word anpdict.txt</a> (containing only noun
phrases starting with "a" or "an"). I checked to see whether each
reversed component of a phrase appeared anywhere in any other phrase.
That eliminated "a biologist", but it let "a zoom" stick around,
because the reversed component "mooz" appears in "a schmooze".  Doing
this level of reduction gets us down to a dictionary of 11,065
phrases.  But on reflection I realized that not only does each
reversed component have to appear in some word, it must appear <i>as a
component</i> of some word.  The fact that "mooz" appears in "a
schmooze" is not good enough.  That would only work if "a zoom" could
be followed by the letters "hcsa", which of course it cannot; it must
be follwed by the letter "a".  Using that stricter test, we get down
to only <a href="anpdict-short.txt">4,528 noun phrases</a> that are
actually usable. So to get a 5,400 word palindrome we would need to
start with a bigger dictionary.

<p><b>Speed:</b> My program consistently generates palindromes of over
2000 words in under 10 seconds using the 4,528  word dictionary. It doesn't
go much beyond that.

<p><hr>
<table width="100%">
<tr><td align=left>
<a href="http://www.norvig.com">Peter Norvig</a>, 20:02 02/20 2002
<td align="right"><a href="palindrome-comments.html">See some comments on this page.</a>
</table>
</body>
</html>
